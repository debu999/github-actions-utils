name: 'Get & Cache Dependencies'

description: 'Get the Dependencies and Cache them'
inputs:
  caching:
    description: 'Weather to cache the dependencies or not'
    required: false
    default: 'true'
outputs:
  used-cache:
    description: 'Weather the cache was used or not to install dependencies'
    value: ${{ steps.install.outputs.cache }}
runs:
  using: composite
  steps:
    - name: install python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install poetry
      uses: abatilo/actions-poetry@v3

    - name: Setup a local virtual environment (if no poetry.toml file)
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      shell: bash
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
        echo "GitHub Context:"
        echo "$GITHUB_CONTEXT"
    - uses: actions/cache@v4
      id: venv_cache
      name: Define a cache for the virtual environment based on the dependencies lock file
      if: inputs.caching == 'true'
      with:
        path: ./.venv
        key: ${{ runner.os }}-poetry-venv-${{ hashFiles('poetry.lock') }}
    - name: Install the project dependencies
      shell: bash
      id: install
      run: |
        poetry install
        echo "cache=${{inputs.caching}}" >> $GITHUB_OUTPUT