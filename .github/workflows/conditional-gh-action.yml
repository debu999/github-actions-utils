name: conditional-workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:


#failure() - Returns true when any previous step failed.
#success() - Returns true when all previous steps succeeded.
#always() - Returns true for all steps.
#cancelled() - Returns true when the workflow was cancelled.

jobs:
  steps-conditional:
    runs-on: macos-latest
    env:
      SUCCESS: voila
      FAILURE: huh
    steps:
      - name: success step
        id: success_step
        run: |
          if [ "$SUCCESS" == "voila" ]; then
            exit 0
          else
            exit -1
          fi
      - name: step run on failure
        if: failure() && steps.success_step.outcome == 'failure'
        run: |
          echo success step failed ${{ steps.success_step.conclusion }}
  job-conditional-failure:
    if: failure()
    needs:
      - steps-conditional
    runs-on: macos-latest
    steps:
      - name: run on steps-conditional failure
        id: success_step
        run: |
          echo "run on steps-conditional failure"
  job-conditional-success:
    if: success()
    needs:
      - steps-conditional
    runs-on: macos-latest
    steps:
      - name: run on steps-conditional/job-conditional-failure success
        id: success_step
        run: |
          echo "run on steps-conditional/job-conditional-failure success"
  job-conditional-always:
    if: always()
    needs:
      - steps-conditional
    runs-on: macos-latest
    steps:
      - name: run on steps-conditional/job-conditional-failure/job-conditional-success always
        id: success_step
        run: |
          echo "run on steps-conditional/job-conditional-failure/job-conditional-success always"
  test-lint:
    runs-on: macos-latest
    outputs:
      script-file1: ${{ steps.publish.outputs.script-file1 }}
      script-file2: ${{ steps.publish.outputs.script-file2 }}
    steps: # Runs a single command using the runners shell
      - name: checkout code
        uses: actions/checkout@v4

      - name: install python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install poetry
        uses: abatilo/actions-poetry@v3

      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - uses: actions/cache@v4
        id: venv_cache
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: ${{ runner.os }}-poetry-venv-${{ hashFiles('poetry.lock') }}

      - name: Install the project dependencies
        if: steps.venv_cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Analysing the code with pylint
        run: |
          poetry run pylint $(git ls-files '*.py')

      - name: Run the automated tests (for example)
        run: poetry run pytest -v

      - name: Publish job output to github output file
        id: publish
        run: find github_actions_utils/*.py -type f -execdir echo '{}' ';' | awk '{print "script-file"NR"="$0}' >> $GITHUB_OUTPUT
