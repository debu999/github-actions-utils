name: conditional-workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:


#failure() - Returns true when any previous step failed.
#success() - Returns true when all previous steps succeeded.
#always() - Returns true for all steps.
#cancelled() - Returns true when the workflow was cancelled.

jobs:
  steps-conditional:
    runs-on: macos-latest
    env:
      SUCCESS: voila
      FAILURE: huh
    steps:
      - name: success step
        id: success_step
        run: |
          if [ "$SUCCESS" == "voila" ]; then
            exit 0
          else
            exit -1
          fi
      - name: step run on failure
        if: failure() && steps.success_step.outcome == 'failure'
        run: |
          echo success step failed ${{ steps.success_step.conclusion }}
  job-conditional-failure:
    if: failure()
    needs:
      - steps-conditional
    runs-on: macos-latest
    steps:
      - name: run on steps-conditional failure
        id: success_step
        run: |
          echo "run on steps-conditional failure"
  job-conditional-success:
    if: success()
    needs:
      - steps-conditional
    runs-on: macos-latest
    steps:
      - name: run on steps-conditional/job-conditional-failure success
        id: success_step
        run: |
          echo "run on steps-conditional/job-conditional-failure success"
  job-conditional-always:
    if: always()
    needs:
      - steps-conditional
    runs-on: macos-latest
    steps:
      - name: run on steps-conditional/job-conditional-failure/job-conditional-success always
        id: success_step
        run: |
          echo "run on steps-conditional/job-conditional-failure/job-conditional-success always"
  test-lint:
    continue-on-error: true
    strategy:
      matrix: # Run the job with different versions of Python
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]
        os-version: [ ubuntu-latest, macos-latest, windows-latest ]
        include:
          - python-version: "3.9"
            os-version: ubuntu-latest
        exclude:
          - python-version: "3.12"
            os-version: windows-latest
    runs-on: ${{ matrix.os-version }}
    outputs:
      script-file1: ${{ steps.publish.outputs.script-file1 }}
      script-file2: ${{ steps.publish.outputs.script-file2 }}
    steps: # Runs a single command using the runners shell
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo GITHUB_CONTEXT - "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo JOB_CONTEXT - "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo STEPS_CONTEXT - "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo RUNNER_CONTEXT - "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo STRATEGY_CONTEXT - "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo MATRIX_CONTEXT - "$MATRIX_CONTEXT"
      - name: checkout code
        uses: actions/checkout@v4

      - name: install python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        uses: abatilo/actions-poetry@v3

      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - uses: actions/cache@v4
        id: venv_cache
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: ${{ runner.os }}-poetry-venv-${{ hashFiles('poetry.lock') }}

      - name: Install the project dependencies
        if: steps.venv_cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Analysing the code with pylint
        run: |
          poetry run pylint $(git ls-files '*.py')

      - name: Run the automated tests (for example)
        run: poetry run pytest -v

      - name: Publish job output to github output file
        id: publish
        run: find github_actions_utils/*.py -type f -execdir echo '{}' ';' | awk '{print "script-file"NR"="$0}' >> $GITHUB_OUTPUT

      - name: Upload workspace folder artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ github.run_id }}-${{ matrix.python-version }}-${{ matrix.os-version }}
          path: ./
  reuse-workflow:
    uses: ./.github/workflows/reuseable-initialization-workflow.yml
    with:
      artifact-name: artifact-${{ github.run_id }}
    secrets:
      WF_SECRET: ${{ secrets.REUSE_WF_SECRET }}
