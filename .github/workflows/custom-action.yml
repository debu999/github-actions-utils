# This is a basic workflow to help you get started with Actions
name: custom-action-workflow

# Controls when the workflow will run
on: # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
      - main
  #    paths-ignore:
  #      - '.github/workflows/**'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - closed
      - assigned
    branches:
      - main
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test-lint: #    runs-on: macos-latest no docker in macos-latest
    environment: main
    runs-on: ubuntu-latest
    outputs:
      script-file1: ${{ steps.publish.outputs.script-file1 }}
      script-file2: ${{ steps.publish.outputs.script-file2 }}
    env:
      APP_ENV: ${{ secrets.APP_ENV }}
      RYUK_CONTAINER_IMAGE: ${{ secrets.RYUK_CONTAINER_IMAGE }}
      MONGODB_USER: ${{ secrets.MONGODB_USER }}
      MONGODB_CREDS: ${{ secrets.MONGODB_CREDS }}
      MONGODB_CLUSTER: ${{ secrets.MONGODB_CLUSTER }}
    services:
      mongodb:
        image: mongo:8.0.3
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGODB_USER }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGODB_CREDS }}
    steps: # Runs a single command using the runners shell
      - name: checkout code
        uses: actions/checkout@v4

      - name: Load & Cache dependencies
        uses: ./.github/actions/cached-code

      - name: Output Information
        run: echo "cache used ?? - ${{ steps.lnc_dependencies.outputs.cache-hit }}"

      - name: Analysing the code with pylint
        run: |
          poetry run pylint $(git ls-files '*.py')

      - name: start redpanda
        uses: redpanda-data/github-action@v0.1.4
        with:
          version: "latest"

      - name: Run the automated tests kafka-mongodb
        run: poetry run pytest -v -s

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it

      # Runs good by print
      - name: Run a multi-line script
        run: |
          echo time to bid adieu
          echo "$(date) - time up...".

      - name: Upload workspace folder artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ github.run_id }}
          path: ./

      - name: Publish job output to github output file
        id: publish
        run: find github_actions_utils/*.py -type f -execdir echo '{}' ';' | awk '{print "script-file"NR"="$0}' >> $GITHUB_OUTPUT
  deploy:
    runs-on: macos-latest
    needs: test-lint
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Load & Cache dependencies
        id: lnc_dependencies
        uses: ./.github/actions/cached-code
        with:
          caching: 'false'

      - name: Output Information
        run: echo "cache used ?? - ${{ steps.lnc_dependencies.outputs.cache-hit }}"

      - name: Download folder artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact-${{ github.run_id }}
          path: ./artifact-${{ github.run_id }}

      - name: Print the folder
        run: |
          echo "Previous job's folder: $GITHUB_WORKSPACE"
          ls -lRta

      - name: Output py files
        run: |
          echo "${{ needs.test-lint.outputs.script-file1 }}"
          echo "${{ needs.test-lint.outputs.script-file2 }}"
